class Solution {
public:
    int leastInterval(vector<char>& tasks, int n) {
        
        
        int fre[26]={0};
        
        for(int i=0;i<tasks.size();i++)
        {
            fre[tasks[i]-'A']++;
        }
        
        int ans=0;
        n++;
        
        priority_queue<int>pq;
        for(int i=0;i<26;i++)
            if(fre[i])
                pq.push(fre[i]);
        
        while(!pq.empty())
        {
            vector<int>v;
            for(int i=0;i<n;i++)
            {
                if(pq.empty())
                    break;
                v.push_back(pq.top());
                pq.pop();
            }
            
            for(int i=0;i<v.size();i++)
            {
                v[i]--;
                ans++;
                if(v[i])
                    pq.push(v[i]);
            }
            
            if(!pq.empty())
            ans+=n-v.size();
            
            // cout<<ans<<endl;
        }
        
        return ans;
    }
};