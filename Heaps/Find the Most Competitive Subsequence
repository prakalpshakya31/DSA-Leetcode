class Solution {
public:
    vector<int> mostCompetitive(vector<int>& nums, int k) {
        
//         priority_queue<pair<int,int>,vector<pair<int,int>>,greater<pair<int,int>>>pq;
        
//         vector<int>ans;
        
//         for(int i=0;i<nums.size()-k;i++)
//         {
//             pq.push({nums[i],i});
//         }
        
//         int last=-1;
        
//         for(int i=nums.size()-k;i<nums.size();i++)
//         {
//             pq.push({nums[i],i});
//             while((pq.top()).second<=last)
//                 pq.pop();
//             ans.push_back(pq.top().first);
//             last=pq.top().second;
//             pq.pop();
//         }
        
//         return ans;
        
        vector<int>ans;
        
        k=nums.size()-k;
        
        for(int i=0;i<nums.size();i++)
        {
            while(ans.size()&&ans.back()>nums[i]&&k)
            {
                ans.pop_back();
                k--;
            }
            ans.push_back(nums[i]);
        }
        
        while(k)
            ans.pop_back(),k--;
        
        return ans;
    }
};