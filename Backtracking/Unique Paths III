class Solution {
public:
    
    int dx[4]={1,0,-1,0};
    int dy[4]={0,1,0,-1};
    
    bool isvalid(int x,int y,vector<vector<int>>& grid, bool visited[][30])
    {
        int n=grid.size();
        int m=grid[0].size();
        
        if(x<0||x>=n||y<0||y>=m||grid[x][y]==-1||visited[x][y]==true)
            return false;
        return true;
    }
    
    void solve(int x,int y, vector<vector<int>> &grid, int &ans, bool visited[][30])
    {
        if(grid[x][y]==2)
        {
            bool flag=true;
            for(int i=0;i<grid.size();i++)
            {
                for(int j=0;j<grid[0].size();j++)
                {
                    if(grid[i][j]==0&&visited[i][j]==false)
                        flag=false;
                }
            }
            if(flag)
            ans++;
            return;
        }
        
        visited[x][y]=true;
        
        for(int i=0;i<4;i++)
        {
            if(isvalid(x+dx[i],y+dy[i],grid,visited))
            {
                solve(x+dx[i],y+dy[i],grid,ans,visited);   
            }
        }
        
        visited[x][y]=false;
    }
    
    int uniquePathsIII(vector<vector<int>>& grid) {
        pair<int,int>s;
        int n=grid.size(),m=grid[0].size();
        bool visited[30][30];
        
        for(int i=0;i<n;i++)
        {
            for(int j=0;j<m;j++)
            {
                visited[i][j]=false;
                if(grid[i][j]==1)
                    s={i,j};
            }
        }
        
        int ans=0;
        solve(s.first,s.second,grid,ans,visited);
        return ans;
    }
};